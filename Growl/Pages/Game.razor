@page "/game/{gameCode}"
@using Growl.Services
@using Blazored.SessionStorage
@using Func

@inject ISessionStorageService SessionStorage
@inject GameService GameService
@inject SessionService SessionService;

@if (SessionId is None)
{
    return;
}

<div class="content">
    @if (_gameRunner.Status == GameStatus.Lobby)
    {
        <Growl.Controls.Lobby GameCode="GameCode" OnStartGame="StartGame" GameRunner="_gameRunner" SessionId="@Require(SessionId)" />
    }
</div>
@code {
    [Parameter]
    public string GameCode { get; set; }


    private GameRunner _gameRunner;

    public Option<Guid> SessionId { get; set; } = Option.None<Guid>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _gameRunner = GameService.GetGame(GameCode) switch
        {
            Some<GameRunner> r => r.Value,
            _ => throw new Exception("Game hasn't been started")
        };

        _gameRunner.OnGameStateUpdated += async _ =>
        {
            await InvokeAsync(StateHasChanged);
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (SessionId is None)
        {
            var sessionId = await SessionStorage.GetItemAsync<Guid?>("sessionId");
            if (sessionId == null)
            {
                sessionId = SessionService.GetOrInitSessionId();
                await SessionStorage.SetItemAsync("sessionId", sessionId);
            }

            SessionId = Option.Some(sessionId.Value);
            StateHasChanged();
        }
    }

    private void StartGame()
    {
        _gameRunner.StartGame();

        StateHasChanged();
    }

    private TValue Require<TValue>(Option<TValue> value) =>
        value is Some<TValue> v ? v.Value : throw new Exception("Required value was not set");
}

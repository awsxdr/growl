@page "/game/{gameCode}"
@using Growl.Services
@using Blazored.SessionStorage
@using System.ComponentModel.DataAnnotations
@using Func

@inject ISessionStorageService SessionStorage
@inject GameService GameService
@inject IJSRuntime JsRuntime
@inject SessionService SessionService;

@if (SessionId is None)
{
    return;
}

<h3>Game @GameCode</h3>

<h3>Player name: <span class="player-name"></span> <button class="btn btn-link"><span class="oi oi-pencil" onclick="showPlayerNameModal()"></span></button></h3>
<h2>@(SessionId is Some<Guid> v ? v.Value : Guid.Empty)</h2>
<ul class="list-group">
    <li class="list-group-item font-weight-bold">Players</li>
    @foreach (var player in _gameRunner.GetPlayers())
    {
        <li class="list-group-item">@player</li>
    }
</ul>

<div class="modal" id="playerNameModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Enter your name</h5>
            </div>
            <EditForm Model="@playerNameModel" OnValidSubmit="SetPlayerName">
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <label for="name">Display name</label>
                    <InputText @bind-Value="playerNameModel.Name" class="form-control" id="playerName" />
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Ok</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string GameCode { get; set; }

    private GameRunner _gameRunner;

    public Option<Guid> SessionId { get; set; } = Option.None<Guid>();

    private PlayerNameModel playerNameModel = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _gameRunner = GameService.GetGame(GameCode) switch
        {
            Some<GameRunner> r => r.Value,
            _ => throw new Exception("Game hasn't been started")
        };

        _gameRunner.OnGameStateUpdated += async state =>
        {
            await InvokeAsync(StateHasChanged);
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await JsRuntime.InvokeVoidAsync("applyPlayerNameToNodes");

        if (SessionId is None)
        {
            var sessionId = await SessionStorage.GetItemAsync<Guid?>("sessionId");
            if (sessionId == null)
            {
                sessionId = SessionService.GetOrInitSessionId();
                await SessionStorage.SetItemAsync("sessionId", sessionId);
            }

            SessionId = Option.Some(sessionId.Value);
            StateHasChanged();
        }
    }

    private async Task SetPlayerName()
    {
        await JsRuntime.InvokeVoidAsync("setPlayerName", playerNameModel.Name);
        await JsRuntime.InvokeVoidAsync("hidePlayerNameModal");

        StateHasChanged();
    }

    [JSInvokable]
    private void ReplacePlayerInGame(string playerName, string previousPlayerName)
    {
        if (_gameRunner.HasPlayer(previousPlayerName))
        {

        }
        else
        {
            switch(_gameRunner.AddPlayer(SessionId is Some<Guid> s ? s.Value : throw new Exception("Session ID not found"), playerName))
            {
                case Failure<TooManyPlayersError> _: throw new Exception("Too many players already in game");
            };
        }
    }

    private class PlayerNameModel
    {
        [Required]
        [StringLength(20, MinimumLength = 4, ErrorMessage = "Name must be between 4 and 20 characters long")]
        [RegularExpression(@"^[a-zA-Z0-9!$£#\.\-\(\)&$]+( [a-zA-Z0-9!$£#\.\-\(\)&$]+)*$", ErrorMessage = "Name contains invalid characters")]
        public string Name { get; set; }
    }
}

@page "/game/{gameCode}"
@using Growl.Services
@using Blazored.SessionStorage
@using Func
@using Growl.Controls

@inject ISessionStorageService SessionStorage
@inject GameService GameService
@inject SessionService SessionService;

@if (SessionId is None)
{
    <div class="spinner-border">
        <span class="sr-only">Loading...</span>
    </div>
    return;
}

<div class="content">
    @switch (_gameRunner.Status)
    {
        case GameStatus.Lobby:
            <Growl.Controls.Lobby GameCode="@GameCode" OnStartGame="StartGame" GameRunner="_gameRunner" SessionId="@Require(SessionId)" />
            break;

        case GameStatus.Sniff:
            <Growl.Controls.Sniff OnSniffCompleted="HandleSniffCompleted" GameRunner="_gameRunner" SessionId="@Require(SessionId)" />
            break;

        case GameStatus.Day:
            <Growl.Controls.Day GameRunner="_gameRunner" SessionId="@Require(SessionId)" />
            break;

        case GameStatus.Night:
            <Growl.Controls.Night GameRunner="_gameRunner" SessionId="@Require(SessionId)" />
            break;

        case GameStatus.NightSwap:
            <Growl.Controls.NightSwap OnCardsSent="HandleCardsSent" GameRunner="_gameRunner" SessionId="@Require(SessionId)" />
            break;

        case GameStatus.SwapReveal:
            <Growl.Controls.SwapReveal OnRevealCompleted="HandleRevealCompleted" GameRunner="_gameRunner" SessionId="@Require(SessionId)" />
            break;
    }
</div>

@code {
    [Parameter]
    public string GameCode { get; set; }

    private GameRunner _gameRunner;

    public Option<Guid> SessionId { get; set; } = Option.None<Guid>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _gameRunner = GameService.GetGame(GameCode) switch
        {
            Some<GameRunner> r => r.Value,
            _ => throw new Exception("Game hasn't been started")
        };

        _gameRunner.OnGameStateUpdated += async _ =>
        {
            await InvokeAsync(StateHasChanged);
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (SessionId is None)
        {
            var sessionId = await SessionStorage.GetItemAsync<Guid?>("sessionId");
            if (sessionId == null)
            {
                sessionId = SessionService.GetOrInitSessionId();
                await SessionStorage.SetItemAsync("sessionId", sessionId);
            }

            SessionId = Option.Some(sessionId.Value);
            StateHasChanged();
        }
    }

    private void StartGame()
    {
        _gameRunner.StartGame();

        StateHasChanged();
    }

    private static TValue Require<TValue>(Option<TValue> value) =>
        value is Some<TValue> v ? v.Value : throw new Exception("Required value was not set");

    private async Task HandleSniffCompleted()
    {
        _gameRunner.SetStatus(GameStatus.Day);

        await InvokeAsync(StateHasChanged);
    }

    private void HandleCardsSent(object sender, NightSwap.CardsSentEventArgs eventArgs)
    {
        var sessionId = Require(SessionId);
        _gameRunner.SetHasPassed(sessionId);
        _gameRunner.PassCard(eventArgs.NextPlayerCard, sessionId, eventArgs.NextPlayerId);
        _gameRunner.PassCard(eventArgs.PreviousPlayerCard, sessionId, eventArgs.PreviousPlayerId);

        if(_gameRunner.GetPlayers().All(p => p.HasSwapped))
            _gameRunner.SetStatus(GameStatus.SwapReveal);
            
        InvokeAsync(StateHasChanged).Wait();
    }

    private async Task HandleRevealCompleted()
    {
        _gameRunner.CompleteCardPass();
        _gameRunner.DiscardTopCard();
        _gameRunner.SetStatus(GameStatus.Day);

        await InvokeAsync(StateHasChanged);
    }
}
